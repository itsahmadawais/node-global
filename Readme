👋 Hey there, welcome to my base project for Node.js and Express with MongoDB!

This project provides a robust user login system with proper folder structure, user routes, and JWT token implementation for secure authentication. With the help of the `yup` package, form validation has also been implemented for input data.

📦 Here are the packages used in this project:

- `bcrypt` for password hashing
- `body-parser` for parsing request bodies
- `dotenv` for loading environment variables
- `express` for creating the web server
- `jsonwebtoken` for generating and verifying JSON Web Tokens (JWTs)
- `mongoose` for object modeling with MongoDB
- `nodemon` for automatic server restarts during development
- `otp-generator` for generating one-time passwords (OTPs)
- `yup` for schema validation

🔑 To get started, create an `.env` file with your own data:

- `MONGO_DB` - your MongoDB URI
- `ACCESS_TOKEN_SECRET` - your access token secret string
- `REFRESH_TOKEN_SECRET` - your refresh token secret string
- `TOKEN_SERVER_PORT` - the port number for the token server
- `TOKEN_EXPIRY_TIME` - the token expiry time (e.g. "24h")

👨‍💻 This project was created by Awais Ahmad (@itsahmadawais) and can be used as a starting point for building secure and scalable Node.js and Express applications with MongoDB.

# Node-Global

👋 Hey there, welcome to my base project for Node.js and Express with MongoDB!

This project provides a robust user login system with proper folder structure, user routes, and JWT token implementation for secure authentication. With the help of the `yup` package, form validation has also been implemented for input data.

📦 Here are the packages used in this project:

- `bcrypt` for password hashing
- `body-parser` for parsing request bodies
- `dotenv` for loading environment variables
- `express` for creating the web server
- `jsonwebtoken` for generating and verifying JSON Web Tokens (JWTs)
- `mongoose` for object modeling with MongoDB
- `nodemon` for automatic server restarts during development
- `otp-generator` for generating one-time passwords (OTPs)
- `yup` for schema validation

🔑 To get started, create an `.env` file with your own data:

- `MONGO_DB` - your MongoDB URI
- `ACCESS_TOKEN_SECRET` - your access token secret string
- `REFRESH_TOKEN_SECRET` - your refresh token secret string
- `TOKEN_SERVER_PORT` - the port number for the token server
- `TOKEN_EXPIRY_TIME` - the token expiry time (e.g. "24h")

👨‍💻 This project was created by Awais Ahmad (@itsahmadawais) and can be used as a starting point for building secure and scalable Node.js and Express applications with MongoDB.
